# Generated by Django 4.2.2 on 2023-11-29 23:24

import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('rmsapp', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='tenant',
            options={'verbose_name': 'user', 'verbose_name_plural': 'users'},
        ),
        # migrations.RemoveField(
        #     model_name='tenant',
        #     name='lease_end_date',
        # ),
        # migrations.RemoveField(
        #     model_name='tenant',
        #     name='lease_start_date',
        # ),
        migrations.AddField(
            model_name='property',
            name='lease_end_date',
            field=models.DateField(default=True),
        ),
        migrations.AddField(
            model_name='property',
            name='lease_start_date',
            field=models.DateField(default=True),
        ),
        migrations.AddField(
            model_name='tenant',
            name='date_joined',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined'),
        ),
        migrations.AddField(
            model_name='tenant',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this tenant belongs to.', related_name='tenant_groups', related_query_name='tenant', to='auth.group', verbose_name='tenant groups'),
        ),
        migrations.AddField(
            model_name='tenant',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active'),
        ),
        migrations.AddField(
            model_name='tenant',
            name='is_staff',
            field=models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status'),
        ),
        migrations.AddField(
            model_name='tenant',
            name='is_superuser',
            field=models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status'),
        ),
        migrations.AddField(
            model_name='tenant',
            name='last_login',
            field=models.DateTimeField(blank=True, null=True, verbose_name='last login'),
        ),
        migrations.AddField(
            model_name='tenant',
            name='password',
            field=models.CharField(default=None, max_length=128, verbose_name='password'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='tenant',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this tenant.', related_name='tenant_user_permissions', related_query_name='tenant', to='auth.permission', verbose_name='tenant user permissions'),
        ),
        migrations.AddField(
            model_name='tenant',
            name='password',
            field=models.CharField(default=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='payment',
            name='tenant',
            field=models.ForeignKey(default=True, on_delete=django.db.models.deletion.CASCADE, to='rmsapp.tenant'),
        ),
        migrations.AlterField(
            model_name='rentdue',
            name='tenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rmsapp.tenant'),
        ),
        migrations.AlterField(
            model_name='tenant',
            name='email',
            field=models.EmailField(blank=True, max_length=254, verbose_name='email address'),
        ),
        migrations.AlterField(
            model_name='tenant',
            name='first_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='first name'),
        ),
        migrations.AlterField(
            model_name='tenant',
            name='last_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='last name'),
        ),
        migrations.CreateModel(
            name='Landlord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('address', models.TextField(blank=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this landlord belongs to.', related_name='landlord_groups', related_query_name='landlord', to='auth.group', verbose_name='landlord groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this landlord.', related_name='landlord_user_permissions', related_query_name='landlord', to='auth.permission', verbose_name='landlord user permissions')),
            ],
            options={
                'permissions': [('can_add_property', 'Can add property'), ('can_remove_property', 'Can remove property'), ('can_view_tenants', 'Can view tenants'), ('can_add_tenant', 'Can add tenant'), ('can_remove_tenant', 'Can remove tenant')],
            },
        ),
        migrations.AddField(
            model_name='property',
            name='landlord',
            field=models.ForeignKey(default=True, on_delete=django.db.models.deletion.CASCADE, to='rmsapp.landlord'),
        ),
    ]
